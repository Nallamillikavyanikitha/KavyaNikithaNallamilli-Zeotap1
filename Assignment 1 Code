<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Google Sheets Mimic</title>
    <link rel="stylesheet" href="styles.css">
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #87CEEB; /* Sky blue background */
        }
        #toolbar {
            display: flex;
            padding: 10px;
            background-color: #f4f4f4;
            border-bottom: 1px solid #ccc;
        }
        #toolbar button {
            margin-right: 10px;
            padding: 10px;
            cursor: pointer;
            background-color: #800080; /* Purple buttons */
            color: white;
            border: none;
            border-radius: 4px;
        }
        #toolbar button:hover {
            background-color: #6a006a; /* Darker purple on hover */
        }
        #spreadsheet {
            padding: 10px;
            overflow-x: auto;
        }
        table {
            border-collapse: collapse;
            width: 100%;
        }
        th, td {
            border: 1px solid #000; /* Black lines */
            padding: 10px;
            text-align: left;
        }
        th {
            background-color: #f4f4f4;
        }
        .selected {
            background-color: #e0e0e0;
        }
    </style>
</head>
<body>
    <div id="toolbar">
        <button onclick="addRow()">Add Row</button>
        <button onclick="addColumn()">Add Column</button>
        <button onclick="deleteRow()">Delete Row</button>
        <button onclick="deleteColumn()">Delete Column</button>
        <button onclick="applyFunction('SUM')">SUM</button>
        <button onclick="applyFunction('AVERAGE')">AVERAGE</button>
        <button onclick="applyFunction('MAX')">MAX</button>
        <button onclick="applyFunction('MIN')">MIN</button>
        <button onclick="applyFunction('COUNT')">COUNT</button>
        <button onclick="applyFunction('TRIM')">TRIM</button>
        <button onclick="applyFunction('UPPER')">UPPER</button>
        <button onclick="applyFunction('LOWER')">LOWER</button>
        <button onclick="removeDuplicates()">Remove Duplicates</button>
        <button onclick="findAndReplace()">Find & Replace</button>
        <button onclick="saveSpreadsheet()">Save</button>
        <button onclick="loadSpreadsheet()">Load</button>
        <button onclick="showChart()">Show Chart</button>
    </div>
    <div id="spreadsheet">
        <table id="sheetTable">
            <thead>
                <tr>
                    <!-- Header row for column names -->
                </tr>
            </thead>
            <tbody>
                <!-- Table rows will be dynamically added here -->
            </tbody>
        </table>
    </div>
    <canvas id="chartCanvas" width="400" height="400" style="display:none;"></canvas>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        function addRow() {
            const table = document.getElementById('sheetTable').getElementsByTagName('tbody')[0];
            const row = table.insertRow();
            const columns = table.rows[0] ? table.rows[0].cells.length : 5; // Default to 5 columns if none exist
            for (let i = 0; i < columns; i++) {
                const cell = row.insertCell();
                cell.contentEditable = true;
                cell.addEventListener('click', () => cell.classList.toggle('selected'));
            }
        }

        function addColumn() {
            const table = document.getElementById('sheetTable');
            const headerRow = table.getElementsByTagName('thead')[0].rows[0] || table.createTHead().insertRow();
            const headerCell = document.createElement('th');
            headerCell.textContent = `Column ${headerRow.cells.length + 1}`;
            headerRow.appendChild(headerCell);
            const rows = table.getElementsByTagName('tbody')[0].rows;
            for (let row of rows) {
                const cell = row.insertCell();
                cell.contentEditable = true;
                cell.addEventListener('click', () => cell.classList.toggle('selected'));
            }
        }

        function deleteRow() {
            const table = document.getElementById('sheetTable').getElementsByTagName('tbody')[0];
            if (table.rows.length > 0) {
                table.deleteRow(-1);
            }
        }

        function deleteColumn() {
            const table = document.getElementById('sheetTable');
            const headerRow = table.getElementsByTagName('thead')[0].rows[0];
            if (headerRow && headerRow.cells.length > 0) {
                headerRow.deleteCell(-1);
                const rows = table.getElementsByTagName('tbody')[0].rows;
                for (let row of rows) {
                    row.deleteCell(-1);
                }
            }
        }

        function applyFunction(func) {
            const selectedCells = document.querySelectorAll('.selected');
            const values = Array.from(selectedCells).map(cell => parseFloat(cell.textContent) || 0);
            let result;

            switch (func) {
                case 'SUM':
                    result = values.reduce((a, b) => a + b, 0);
                    break;
                case 'AVERAGE':
                    result = values.length ? values.reduce((a, b) => a + b, 0) / values.length : 0;
                    break;
                case 'MAX':
                    result = Math.max(...values);
                    break;
                case 'MIN':
                    result = Math.min(...values);
                    break;
                case 'COUNT':
                    result = values.length;
                    break;
                case 'TRIM':
                    selectedCells.forEach(cell => cell.textContent = cell.textContent.trim());
                    return;
                case 'UPPER':
                    selectedCells.forEach(cell => cell.textContent = cell.textContent.toUpperCase());
                    return;
                case 'LOWER':
                    selectedCells.forEach(cell => cell.textContent = cell.textContent.toLowerCase());
                    return;
                default:
                    alert(`${func} function is not implemented yet.`);
                    return;
            }

            alert(`${func} Result: ${result}`);
        }

        function removeDuplicates() {
            const table = document.getElementById('sheetTable').getElementsByTagName('tbody')[0];
            const rows = Array.from(table.rows);
            const uniqueRows = rows.filter((row, index, self) =>
                index === self.findIndex((t) => t.innerHTML === row.innerHTML)
            );
            table.innerHTML = '';
            uniqueRows.forEach(row => table.appendChild(row));
        }

        function findAndReplace() {
            const searchText = prompt('Enter text to find:');
            const replaceText = prompt('Enter replacement text:');
            const cells = document.querySelectorAll('td');
            cells.forEach(cell => {
                if (cell.textContent.includes(searchText)) {
                    cell.textContent = cell.textContent.replace(new RegExp(searchText, 'g'), replaceText);
                }
            });
        }

        function saveSpreadsheet() {
            const table = document.getElementById('sheetTable');
            const data = [];
            for (let row of table.rows) {
                const rowData = [];
                for (let cell of row.cells) {
                    rowData.push(cell.textContent);
                }
                data.push(rowData);
            }
            localStorage.setItem('spreadsheetData', JSON.stringify(data));
            alert('Spreadsheet saved!');
        }

        function loadSpreadsheet() {
            const data = JSON.parse(localStorage.getItem('spreadsheetData') || '[]');
            const table = document.getElementById('sheetTable').getElementsByTagName('tbody')[0];
            table.innerHTML = '';
            for (let rowData of data) {
                const row = table.insertRow();
                for (let cellData of rowData) {
                    const cell = row.insertCell();
                    cell.contentEditable = true;
                    cell.textContent = cellData;
                    cell.addEventListener('click', () => cell.classList.toggle('selected'));
                }
            }
        }

        function showChart() {
            const ctx = document.getElementById('chartCanvas').getContext('2d');
            document.getElementById('chartCanvas').style.display = 'block';
            const labels = [];
            const data = [];
            const selectedCells = document.querySelectorAll('.selected');

            selectedCells.forEach((cell, index) => {
                labels.push(`Cell ${index + 1}`);
                data.push(parseFloat(cell.textContent) || 0);
            });

            new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Selected Cells Data',
                        data: data,
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        borderColor: 'rgba(75, 192, 192, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }

        // Initial setup
        for (let i = 0; i < 5; i++) addRow(); // Add initial rows
        addColumn(); // Add initial column
    </script>
</body>
</html>
